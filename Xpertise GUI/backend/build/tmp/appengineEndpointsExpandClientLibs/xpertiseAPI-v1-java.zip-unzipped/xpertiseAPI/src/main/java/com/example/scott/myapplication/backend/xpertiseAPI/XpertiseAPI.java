/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-08-03 17:34:38 UTC)
 * on 2015-10-14 at 04:12:00 UTC 
 * Modify at your own risk.
 */

package com.example.scott.myapplication.backend.xpertiseAPI;

/**
 * Service definition for XpertiseAPI (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link XpertiseAPIRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class XpertiseAPI extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the xpertiseAPI library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "xpertiseAPI/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public XpertiseAPI(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  XpertiseAPI(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Profile collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code XpertiseAPI xpertiseAPI = new XpertiseAPI(...);}
   *   {@code XpertiseAPI.Profile.List request = xpertiseAPI.profile().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Profile profile() {
    return new Profile();
  }

  /**
   * The "profile" collection of methods.
   */
  public class Profile {

    /**
     * Create a request for the method "profile.auth".
     *
     * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
     * parameters, call the {@link Auth#execute()} method to invoke the remote operation.
     *
     * @param email
     * @param password
     * @return the request
     */
    public Auth auth(java.lang.String email, java.lang.String password) throws java.io.IOException {
      Auth result = new Auth(email, password);
      initialize(result);
      return result;
    }

    public class Auth extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.Profile> {

      private static final String REST_PATH = "authProfile/{email}/{password}";

      /**
       * Create a request for the method "profile.auth".
       *
       * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
       * optional parameters, call the {@link Auth#execute()} method to invoke the remote operation. <p>
       * {@link Auth#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @param password
       * @since 1.13
       */
      protected Auth(java.lang.String email, java.lang.String password) {
        super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.Profile.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
        this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      }

      @Override
      public Auth setAlt(java.lang.String alt) {
        return (Auth) super.setAlt(alt);
      }

      @Override
      public Auth setFields(java.lang.String fields) {
        return (Auth) super.setFields(fields);
      }

      @Override
      public Auth setKey(java.lang.String key) {
        return (Auth) super.setKey(key);
      }

      @Override
      public Auth setOauthToken(java.lang.String oauthToken) {
        return (Auth) super.setOauthToken(oauthToken);
      }

      @Override
      public Auth setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Auth) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Auth setQuotaUser(java.lang.String quotaUser) {
        return (Auth) super.setQuotaUser(quotaUser);
      }

      @Override
      public Auth setUserIp(java.lang.String userIp) {
        return (Auth) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Auth setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String password;

      /**

       */
      public java.lang.String getPassword() {
        return password;
      }

      public Auth setPassword(java.lang.String password) {
        this.password = password;
        return this;
      }

      @Override
      public Auth set(String parameterName, Object value) {
        return (Auth) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "profile.get".
     *
     * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param pid
     * @return the request
     */
    public Get get(java.lang.Integer pid) throws java.io.IOException {
      Get result = new Get(pid);
      initialize(result);
      return result;
    }

    public class Get extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.Profile> {

      private static final String REST_PATH = "profile/{pid}";

      /**
       * Create a request for the method "profile.get".
       *
       * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param pid
       * @since 1.13
       */
      protected Get(java.lang.Integer pid) {
        super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.Profile.class);
        this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer pid;

      /**

       */
      public java.lang.Integer getPid() {
        return pid;
      }

      public Get setPid(java.lang.Integer pid) {
        this.pid = pid;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "profile.listAll".
     *
     * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
     * parameters, call the {@link ListAll#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public ListAll listAll() throws java.io.IOException {
      ListAll result = new ListAll();
      initialize(result);
      return result;
    }

    public class ListAll extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection> {

      private static final String REST_PATH = "profile";

      /**
       * Create a request for the method "profile.listAll".
       *
       * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
       * optional parameters, call the {@link ListAll#execute()} method to invoke the remote operation.
       * <p> {@link
       * ListAll#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected ListAll() {
        super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListAll setAlt(java.lang.String alt) {
        return (ListAll) super.setAlt(alt);
      }

      @Override
      public ListAll setFields(java.lang.String fields) {
        return (ListAll) super.setFields(fields);
      }

      @Override
      public ListAll setKey(java.lang.String key) {
        return (ListAll) super.setKey(key);
      }

      @Override
      public ListAll setOauthToken(java.lang.String oauthToken) {
        return (ListAll) super.setOauthToken(oauthToken);
      }

      @Override
      public ListAll setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListAll) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListAll setQuotaUser(java.lang.String quotaUser) {
        return (ListAll) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListAll setUserIp(java.lang.String userIp) {
        return (ListAll) super.setUserIp(userIp);
      }

      @Override
      public ListAll set(String parameterName, Object value) {
        return (ListAll) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "profile.post".
     *
     * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
     * parameters, call the {@link Post#execute()} method to invoke the remote operation.
     *
     * @param firstName
     * @param lastName
     * @param password
     * @param email
     * @param city
     * @return the request
     */
    public Post post(java.lang.String firstName, java.lang.String lastName, java.lang.String password, java.lang.String email, java.lang.String city) throws java.io.IOException {
      Post result = new Post(firstName, lastName, password, email, city);
      initialize(result);
      return result;
    }

    public class Post extends XpertiseAPIRequest<Void> {

      private static final String REST_PATH = "void/{firstName}/{lastName}/{password}/{email}/{city}";

      /**
       * Create a request for the method "profile.post".
       *
       * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
       * optional parameters, call the {@link Post#execute()} method to invoke the remote operation. <p>
       * {@link Post#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param firstName
       * @param lastName
       * @param password
       * @param email
       * @param city
       * @since 1.13
       */
      protected Post(java.lang.String firstName, java.lang.String lastName, java.lang.String password, java.lang.String email, java.lang.String city) {
        super(XpertiseAPI.this, "POST", REST_PATH, null, Void.class);
        this.firstName = com.google.api.client.util.Preconditions.checkNotNull(firstName, "Required parameter firstName must be specified.");
        this.lastName = com.google.api.client.util.Preconditions.checkNotNull(lastName, "Required parameter lastName must be specified.");
        this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
        this.city = com.google.api.client.util.Preconditions.checkNotNull(city, "Required parameter city must be specified.");
      }

      @Override
      public Post setAlt(java.lang.String alt) {
        return (Post) super.setAlt(alt);
      }

      @Override
      public Post setFields(java.lang.String fields) {
        return (Post) super.setFields(fields);
      }

      @Override
      public Post setKey(java.lang.String key) {
        return (Post) super.setKey(key);
      }

      @Override
      public Post setOauthToken(java.lang.String oauthToken) {
        return (Post) super.setOauthToken(oauthToken);
      }

      @Override
      public Post setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Post) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Post setQuotaUser(java.lang.String quotaUser) {
        return (Post) super.setQuotaUser(quotaUser);
      }

      @Override
      public Post setUserIp(java.lang.String userIp) {
        return (Post) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String firstName;

      /**

       */
      public java.lang.String getFirstName() {
        return firstName;
      }

      public Post setFirstName(java.lang.String firstName) {
        this.firstName = firstName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String lastName;

      /**

       */
      public java.lang.String getLastName() {
        return lastName;
      }

      public Post setLastName(java.lang.String lastName) {
        this.lastName = lastName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String password;

      /**

       */
      public java.lang.String getPassword() {
        return password;
      }

      public Post setPassword(java.lang.String password) {
        this.password = password;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Post setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String city;

      /**

       */
      public java.lang.String getCity() {
        return city;
      }

      public Post setCity(java.lang.String city) {
        this.city = city;
        return this;
      }

      @Override
      public Post set(String parameterName, Object value) {
        return (Post) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link XpertiseAPI}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link XpertiseAPI}. */
    @Override
    public XpertiseAPI build() {
      return new XpertiseAPI(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link XpertiseAPIRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setXpertiseAPIRequestInitializer(
        XpertiseAPIRequestInitializer xpertiseapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(xpertiseapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
