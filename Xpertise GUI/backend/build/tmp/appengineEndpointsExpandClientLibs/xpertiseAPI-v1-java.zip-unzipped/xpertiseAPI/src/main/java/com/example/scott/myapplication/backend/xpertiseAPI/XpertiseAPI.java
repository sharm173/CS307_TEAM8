/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2015-11-16 19:10:01 UTC)
 * on 2015-11-28 at 18:42:24 UTC 
 * Modify at your own risk.
 */

package com.example.scott.myapplication.backend.xpertiseAPI;

/**
 * Service definition for XpertiseAPI (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link XpertiseAPIRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class XpertiseAPI extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the xpertiseAPI library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationID.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "xpertiseAPI/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public XpertiseAPI(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  XpertiseAPI(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the API collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code XpertiseAPI xpertiseAPI = new XpertiseAPI(...);}
   *   {@code XpertiseAPI.API.List request = xpertiseAPI.aPI().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public API aPI() {
    return new API();
  }

  /**
   * The "aPI" collection of methods.
   */
  public class API {

    /**
     * Create a request for the method "aPI.getGroupMembers".
     *
     * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
     * parameters, call the {@link GetGroupMembers#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetGroupMembers getGroupMembers() throws java.io.IOException {
      GetGroupMembers result = new GetGroupMembers();
      initialize(result);
      return result;
    }

    public class GetGroupMembers extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection> {

      private static final String REST_PATH = "profilecollection";

      /**
       * Create a request for the method "aPI.getGroupMembers".
       *
       * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
       * optional parameters, call the {@link GetGroupMembers#execute()} method to invoke the remote
       * operation. <p> {@link GetGroupMembers#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected GetGroupMembers() {
        super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetGroupMembers setAlt(java.lang.String alt) {
        return (GetGroupMembers) super.setAlt(alt);
      }

      @Override
      public GetGroupMembers setFields(java.lang.String fields) {
        return (GetGroupMembers) super.setFields(fields);
      }

      @Override
      public GetGroupMembers setKey(java.lang.String key) {
        return (GetGroupMembers) super.setKey(key);
      }

      @Override
      public GetGroupMembers setOauthToken(java.lang.String oauthToken) {
        return (GetGroupMembers) super.setOauthToken(oauthToken);
      }

      @Override
      public GetGroupMembers setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetGroupMembers) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetGroupMembers setQuotaUser(java.lang.String quotaUser) {
        return (GetGroupMembers) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetGroupMembers setUserIp(java.lang.String userIp) {
        return (GetGroupMembers) super.setUserIp(userIp);
      }

      @Override
      public GetGroupMembers set(String parameterName, Object value) {
        return (GetGroupMembers) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "aPI.getPosts".
     *
     * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
     * parameters, call the {@link GetPosts#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetPosts getPosts() throws java.io.IOException {
      GetPosts result = new GetPosts();
      initialize(result);
      return result;
    }

    public class GetPosts extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.PostCollection> {

      private static final String REST_PATH = "postcollection";

      /**
       * Create a request for the method "aPI.getPosts".
       *
       * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
       * optional parameters, call the {@link GetPosts#execute()} method to invoke the remote operation.
       * <p> {@link
       * GetPosts#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetPosts() {
        super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.PostCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetPosts setAlt(java.lang.String alt) {
        return (GetPosts) super.setAlt(alt);
      }

      @Override
      public GetPosts setFields(java.lang.String fields) {
        return (GetPosts) super.setFields(fields);
      }

      @Override
      public GetPosts setKey(java.lang.String key) {
        return (GetPosts) super.setKey(key);
      }

      @Override
      public GetPosts setOauthToken(java.lang.String oauthToken) {
        return (GetPosts) super.setOauthToken(oauthToken);
      }

      @Override
      public GetPosts setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetPosts) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetPosts setQuotaUser(java.lang.String quotaUser) {
        return (GetPosts) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetPosts setUserIp(java.lang.String userIp) {
        return (GetPosts) super.setUserIp(userIp);
      }

      @Override
      public GetPosts set(String parameterName, Object value) {
        return (GetPosts) super.set(parameterName, value);
      }
    }

  }

  /**
   * Create a request for the method "group_get".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link GroupGet#execute()} method to invoke the remote operation.
   *
   * @param gid
   * @return the request
   */
  public GroupGet groupGet(java.lang.Integer gid) throws java.io.IOException {
    GroupGet result = new GroupGet(gid);
    initialize(result);
    return result;
  }

  public class GroupGet extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.Group> {

    private static final String REST_PATH = "group/{gid}";

    /**
     * Create a request for the method "group_get".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link GroupGet#execute()} method to invoke the remote operation.
     * <p> {@link
     * GroupGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param gid
     * @since 1.13
     */
    protected GroupGet(java.lang.Integer gid) {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.Group.class);
      this.gid = com.google.api.client.util.Preconditions.checkNotNull(gid, "Required parameter gid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GroupGet setAlt(java.lang.String alt) {
      return (GroupGet) super.setAlt(alt);
    }

    @Override
    public GroupGet setFields(java.lang.String fields) {
      return (GroupGet) super.setFields(fields);
    }

    @Override
    public GroupGet setKey(java.lang.String key) {
      return (GroupGet) super.setKey(key);
    }

    @Override
    public GroupGet setOauthToken(java.lang.String oauthToken) {
      return (GroupGet) super.setOauthToken(oauthToken);
    }

    @Override
    public GroupGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GroupGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GroupGet setQuotaUser(java.lang.String quotaUser) {
      return (GroupGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public GroupGet setUserIp(java.lang.String userIp) {
      return (GroupGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer gid;

    /**

     */
    public java.lang.Integer getGid() {
      return gid;
    }

    public GroupGet setGid(java.lang.Integer gid) {
      this.gid = gid;
      return this;
    }

    @Override
    public GroupGet set(String parameterName, Object value) {
      return (GroupGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "group_post".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link GroupPost#execute()} method to invoke the remote operation.
   *
   * @param name
   * @param desc
   * @param makerPid
   * @return the request
   */
  public GroupPost groupPost(java.lang.String name, java.lang.String desc, java.lang.Integer makerPid) throws java.io.IOException {
    GroupPost result = new GroupPost(name, desc, makerPid);
    initialize(result);
    return result;
  }

  public class GroupPost extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean> {

    private static final String REST_PATH = "postGroup/{name}/{desc}/{makerPid}";

    /**
     * Create a request for the method "group_post".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link GroupPost#execute()} method to invoke the remote
     * operation. <p> {@link
     * GroupPost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param name
     * @param desc
     * @param makerPid
     * @since 1.13
     */
    protected GroupPost(java.lang.String name, java.lang.String desc, java.lang.Integer makerPid) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean.class);
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      this.desc = com.google.api.client.util.Preconditions.checkNotNull(desc, "Required parameter desc must be specified.");
      this.makerPid = com.google.api.client.util.Preconditions.checkNotNull(makerPid, "Required parameter makerPid must be specified.");
    }

    @Override
    public GroupPost setAlt(java.lang.String alt) {
      return (GroupPost) super.setAlt(alt);
    }

    @Override
    public GroupPost setFields(java.lang.String fields) {
      return (GroupPost) super.setFields(fields);
    }

    @Override
    public GroupPost setKey(java.lang.String key) {
      return (GroupPost) super.setKey(key);
    }

    @Override
    public GroupPost setOauthToken(java.lang.String oauthToken) {
      return (GroupPost) super.setOauthToken(oauthToken);
    }

    @Override
    public GroupPost setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GroupPost) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GroupPost setQuotaUser(java.lang.String quotaUser) {
      return (GroupPost) super.setQuotaUser(quotaUser);
    }

    @Override
    public GroupPost setUserIp(java.lang.String userIp) {
      return (GroupPost) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public GroupPost setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String desc;

    /**

     */
    public java.lang.String getDesc() {
      return desc;
    }

    public GroupPost setDesc(java.lang.String desc) {
      this.desc = desc;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer makerPid;

    /**

     */
    public java.lang.Integer getMakerPid() {
      return makerPid;
    }

    public GroupPost setMakerPid(java.lang.Integer makerPid) {
      this.makerPid = makerPid;
      return this;
    }

    @Override
    public GroupPost set(String parameterName, Object value) {
      return (GroupPost) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_auth".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileAuth#execute()} method to invoke the remote operation.
   *
   * @param email
   * @param password
   * @return the request
   */
  public ProfileAuth profileAuth(java.lang.String email, java.lang.String password) throws java.io.IOException {
    ProfileAuth result = new ProfileAuth(email, password);
    initialize(result);
    return result;
  }

  public class ProfileAuth extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.Profile> {

    private static final String REST_PATH = "authProfile/{email}/{password}";

    /**
     * Create a request for the method "profile_auth".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileAuth#execute()} method to invoke the remote
     * operation. <p> {@link
     * ProfileAuth#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param email
     * @param password
     * @since 1.13
     */
    protected ProfileAuth(java.lang.String email, java.lang.String password) {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.Profile.class);
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfileAuth setAlt(java.lang.String alt) {
      return (ProfileAuth) super.setAlt(alt);
    }

    @Override
    public ProfileAuth setFields(java.lang.String fields) {
      return (ProfileAuth) super.setFields(fields);
    }

    @Override
    public ProfileAuth setKey(java.lang.String key) {
      return (ProfileAuth) super.setKey(key);
    }

    @Override
    public ProfileAuth setOauthToken(java.lang.String oauthToken) {
      return (ProfileAuth) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileAuth setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileAuth) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileAuth setQuotaUser(java.lang.String quotaUser) {
      return (ProfileAuth) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileAuth setUserIp(java.lang.String userIp) {
      return (ProfileAuth) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public ProfileAuth setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public ProfileAuth setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public ProfileAuth set(String parameterName, Object value) {
      return (ProfileAuth) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_city".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileCity#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @param city
   * @return the request
   */
  public ProfileCity profileCity(java.lang.Integer pid, java.lang.String city) throws java.io.IOException {
    ProfileCity result = new ProfileCity(pid, city);
    initialize(result);
    return result;
  }

  public class ProfileCity extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection> {

    private static final String REST_PATH = "profilesInCity/{pid}/{city}";

    /**
     * Create a request for the method "profile_city".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileCity#execute()} method to invoke the remote
     * operation. <p> {@link
     * ProfileCity#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param pid
     * @param city
     * @since 1.13
     */
    protected ProfileCity(java.lang.Integer pid, java.lang.String city) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
      this.city = com.google.api.client.util.Preconditions.checkNotNull(city, "Required parameter city must be specified.");
    }

    @Override
    public ProfileCity setAlt(java.lang.String alt) {
      return (ProfileCity) super.setAlt(alt);
    }

    @Override
    public ProfileCity setFields(java.lang.String fields) {
      return (ProfileCity) super.setFields(fields);
    }

    @Override
    public ProfileCity setKey(java.lang.String key) {
      return (ProfileCity) super.setKey(key);
    }

    @Override
    public ProfileCity setOauthToken(java.lang.String oauthToken) {
      return (ProfileCity) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileCity setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileCity) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileCity setQuotaUser(java.lang.String quotaUser) {
      return (ProfileCity) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileCity setUserIp(java.lang.String userIp) {
      return (ProfileCity) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileCity setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String city;

    /**

     */
    public java.lang.String getCity() {
      return city;
    }

    public ProfileCity setCity(java.lang.String city) {
      this.city = city;
      return this;
    }

    @Override
    public ProfileCity set(String parameterName, Object value) {
      return (ProfileCity) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_edit".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileEdit#execute()} method to invoke the remote operation.
   *
   * @param firstName
   * @param lastName
   * @param password
   * @param email
   * @param city
   * @param lat
   * @param lng
   * @param description
   * @param pid
   * @return the request
   */
  public ProfileEdit profileEdit(java.lang.String firstName, java.lang.String lastName, java.lang.String password, java.lang.String email, java.lang.String city, java.lang.Double lat, java.lang.Double lng, java.lang.String description, java.lang.Integer pid) throws java.io.IOException {
    ProfileEdit result = new ProfileEdit(firstName, lastName, password, email, city, lat, lng, description, pid);
    initialize(result);
    return result;
  }

  public class ProfileEdit extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean> {

    private static final String REST_PATH = "editProfile/{firstName}/{lastName}/{password}/{email}/{city}/{lat}/{lng}/{description}/{pid}";

    /**
     * Create a request for the method "profile_edit".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileEdit#execute()} method to invoke the remote
     * operation. <p> {@link
     * ProfileEdit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param firstName
     * @param lastName
     * @param password
     * @param email
     * @param city
     * @param lat
     * @param lng
     * @param description
     * @param pid
     * @since 1.13
     */
    protected ProfileEdit(java.lang.String firstName, java.lang.String lastName, java.lang.String password, java.lang.String email, java.lang.String city, java.lang.Double lat, java.lang.Double lng, java.lang.String description, java.lang.Integer pid) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean.class);
      this.firstName = com.google.api.client.util.Preconditions.checkNotNull(firstName, "Required parameter firstName must be specified.");
      this.lastName = com.google.api.client.util.Preconditions.checkNotNull(lastName, "Required parameter lastName must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.city = com.google.api.client.util.Preconditions.checkNotNull(city, "Required parameter city must be specified.");
      this.lat = com.google.api.client.util.Preconditions.checkNotNull(lat, "Required parameter lat must be specified.");
      this.lng = com.google.api.client.util.Preconditions.checkNotNull(lng, "Required parameter lng must be specified.");
      this.description = com.google.api.client.util.Preconditions.checkNotNull(description, "Required parameter description must be specified.");
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
    }

    @Override
    public ProfileEdit setAlt(java.lang.String alt) {
      return (ProfileEdit) super.setAlt(alt);
    }

    @Override
    public ProfileEdit setFields(java.lang.String fields) {
      return (ProfileEdit) super.setFields(fields);
    }

    @Override
    public ProfileEdit setKey(java.lang.String key) {
      return (ProfileEdit) super.setKey(key);
    }

    @Override
    public ProfileEdit setOauthToken(java.lang.String oauthToken) {
      return (ProfileEdit) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileEdit setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileEdit) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileEdit setQuotaUser(java.lang.String quotaUser) {
      return (ProfileEdit) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileEdit setUserIp(java.lang.String userIp) {
      return (ProfileEdit) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String firstName;

    /**

     */
    public java.lang.String getFirstName() {
      return firstName;
    }

    public ProfileEdit setFirstName(java.lang.String firstName) {
      this.firstName = firstName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String lastName;

    /**

     */
    public java.lang.String getLastName() {
      return lastName;
    }

    public ProfileEdit setLastName(java.lang.String lastName) {
      this.lastName = lastName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public ProfileEdit setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public ProfileEdit setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String city;

    /**

     */
    public java.lang.String getCity() {
      return city;
    }

    public ProfileEdit setCity(java.lang.String city) {
      this.city = city;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double lat;

    /**

     */
    public java.lang.Double getLat() {
      return lat;
    }

    public ProfileEdit setLat(java.lang.Double lat) {
      this.lat = lat;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double lng;

    /**

     */
    public java.lang.Double getLng() {
      return lng;
    }

    public ProfileEdit setLng(java.lang.Double lng) {
      this.lng = lng;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String description;

    /**

     */
    public java.lang.String getDescription() {
      return description;
    }

    public ProfileEdit setDescription(java.lang.String description) {
      this.description = description;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileEdit setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @Override
    public ProfileEdit set(String parameterName, Object value) {
      return (ProfileEdit) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_get".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileGet#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @return the request
   */
  public ProfileGet profileGet(java.lang.Integer pid) throws java.io.IOException {
    ProfileGet result = new ProfileGet(pid);
    initialize(result);
    return result;
  }

  public class ProfileGet extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.Profile> {

    private static final String REST_PATH = "profile/{pid}";

    /**
     * Create a request for the method "profile_get".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileGet#execute()} method to invoke the remote
     * operation. <p> {@link
     * ProfileGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param pid
     * @since 1.13
     */
    protected ProfileGet(java.lang.Integer pid) {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.Profile.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfileGet setAlt(java.lang.String alt) {
      return (ProfileGet) super.setAlt(alt);
    }

    @Override
    public ProfileGet setFields(java.lang.String fields) {
      return (ProfileGet) super.setFields(fields);
    }

    @Override
    public ProfileGet setKey(java.lang.String key) {
      return (ProfileGet) super.setKey(key);
    }

    @Override
    public ProfileGet setOauthToken(java.lang.String oauthToken) {
      return (ProfileGet) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileGet setQuotaUser(java.lang.String quotaUser) {
      return (ProfileGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileGet setUserIp(java.lang.String userIp) {
      return (ProfileGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileGet setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @Override
    public ProfileGet set(String parameterName, Object value) {
      return (ProfileGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_getGroups".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileGetGroups#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @return the request
   */
  public ProfileGetGroups profileGetGroups(java.lang.Integer pid) throws java.io.IOException {
    ProfileGetGroups result = new ProfileGetGroups(pid);
    initialize(result);
    return result;
  }

  public class ProfileGetGroups extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.GroupCollection> {

    private static final String REST_PATH = "groupcollection/{pid}";

    /**
     * Create a request for the method "profile_getGroups".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileGetGroups#execute()} method to invoke the remote
     * operation. <p> {@link ProfileGetGroups#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param pid
     * @since 1.13
     */
    protected ProfileGetGroups(java.lang.Integer pid) {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.GroupCollection.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfileGetGroups setAlt(java.lang.String alt) {
      return (ProfileGetGroups) super.setAlt(alt);
    }

    @Override
    public ProfileGetGroups setFields(java.lang.String fields) {
      return (ProfileGetGroups) super.setFields(fields);
    }

    @Override
    public ProfileGetGroups setKey(java.lang.String key) {
      return (ProfileGetGroups) super.setKey(key);
    }

    @Override
    public ProfileGetGroups setOauthToken(java.lang.String oauthToken) {
      return (ProfileGetGroups) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileGetGroups setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileGetGroups) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileGetGroups setQuotaUser(java.lang.String quotaUser) {
      return (ProfileGetGroups) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileGetGroups setUserIp(java.lang.String userIp) {
      return (ProfileGetGroups) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileGetGroups setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @Override
    public ProfileGetGroups set(String parameterName, Object value) {
      return (ProfileGetGroups) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_getReviews".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileGetReviews#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @return the request
   */
  public ProfileGetReviews profileGetReviews(java.lang.Integer pid) throws java.io.IOException {
    ProfileGetReviews result = new ProfileGetReviews(pid);
    initialize(result);
    return result;
  }

  public class ProfileGetReviews extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ReviewCollection> {

    private static final String REST_PATH = "reviewcollection/{pid}";

    /**
     * Create a request for the method "profile_getReviews".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileGetReviews#execute()} method to invoke the remote
     * operation. <p> {@link ProfileGetReviews#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param pid
     * @since 1.13
     */
    protected ProfileGetReviews(java.lang.Integer pid) {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ReviewCollection.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfileGetReviews setAlt(java.lang.String alt) {
      return (ProfileGetReviews) super.setAlt(alt);
    }

    @Override
    public ProfileGetReviews setFields(java.lang.String fields) {
      return (ProfileGetReviews) super.setFields(fields);
    }

    @Override
    public ProfileGetReviews setKey(java.lang.String key) {
      return (ProfileGetReviews) super.setKey(key);
    }

    @Override
    public ProfileGetReviews setOauthToken(java.lang.String oauthToken) {
      return (ProfileGetReviews) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileGetReviews setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileGetReviews) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileGetReviews setQuotaUser(java.lang.String quotaUser) {
      return (ProfileGetReviews) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileGetReviews setUserIp(java.lang.String userIp) {
      return (ProfileGetReviews) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileGetReviews setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @Override
    public ProfileGetReviews set(String parameterName, Object value) {
      return (ProfileGetReviews) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_getTags".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileGetTags#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @return the request
   */
  public ProfileGetTags profileGetTags(java.lang.Integer pid) throws java.io.IOException {
    ProfileGetTags result = new ProfileGetTags(pid);
    initialize(result);
    return result;
  }

  public class ProfileGetTags extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBeanCollection> {

    private static final String REST_PATH = "mybeancollection/{pid}";

    /**
     * Create a request for the method "profile_getTags".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileGetTags#execute()} method to invoke the remote
     * operation. <p> {@link ProfileGetTags#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param pid
     * @since 1.13
     */
    protected ProfileGetTags(java.lang.Integer pid) {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBeanCollection.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfileGetTags setAlt(java.lang.String alt) {
      return (ProfileGetTags) super.setAlt(alt);
    }

    @Override
    public ProfileGetTags setFields(java.lang.String fields) {
      return (ProfileGetTags) super.setFields(fields);
    }

    @Override
    public ProfileGetTags setKey(java.lang.String key) {
      return (ProfileGetTags) super.setKey(key);
    }

    @Override
    public ProfileGetTags setOauthToken(java.lang.String oauthToken) {
      return (ProfileGetTags) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileGetTags setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileGetTags) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileGetTags setQuotaUser(java.lang.String quotaUser) {
      return (ProfileGetTags) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileGetTags setUserIp(java.lang.String userIp) {
      return (ProfileGetTags) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileGetTags setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @Override
    public ProfileGetTags set(String parameterName, Object value) {
      return (ProfileGetTags) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_listAll".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileListAll#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ProfileListAll profileListAll() throws java.io.IOException {
    ProfileListAll result = new ProfileListAll();
    initialize(result);
    return result;
  }

  public class ProfileListAll extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection> {

    private static final String REST_PATH = "profile";

    /**
     * Create a request for the method "profile_listAll".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileListAll#execute()} method to invoke the remote
     * operation. <p> {@link ProfileListAll#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected ProfileListAll() {
      super(XpertiseAPI.this, "GET", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfileListAll setAlt(java.lang.String alt) {
      return (ProfileListAll) super.setAlt(alt);
    }

    @Override
    public ProfileListAll setFields(java.lang.String fields) {
      return (ProfileListAll) super.setFields(fields);
    }

    @Override
    public ProfileListAll setKey(java.lang.String key) {
      return (ProfileListAll) super.setKey(key);
    }

    @Override
    public ProfileListAll setOauthToken(java.lang.String oauthToken) {
      return (ProfileListAll) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileListAll setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileListAll) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileListAll setQuotaUser(java.lang.String quotaUser) {
      return (ProfileListAll) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileListAll setUserIp(java.lang.String userIp) {
      return (ProfileListAll) super.setUserIp(userIp);
    }

    @Override
    public ProfileListAll set(String parameterName, Object value) {
      return (ProfileListAll) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_post".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfilePost#execute()} method to invoke the remote operation.
   *
   * @param firstName
   * @param lastName
   * @param password
   * @param email
   * @param city
   * @param lat
   * @param lng
   * @param description
   * @return the request
   */
  public ProfilePost profilePost(java.lang.String firstName, java.lang.String lastName, java.lang.String password, java.lang.String email, java.lang.String city, java.lang.Double lat, java.lang.Double lng, java.lang.String description) throws java.io.IOException {
    ProfilePost result = new ProfilePost(firstName, lastName, password, email, city, lat, lng, description);
    initialize(result);
    return result;
  }

  public class ProfilePost extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean> {

    private static final String REST_PATH = "mybean/{firstName}/{lastName}/{password}/{email}/{city}/{lat}/{lng}/{description}";

    /**
     * Create a request for the method "profile_post".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfilePost#execute()} method to invoke the remote
     * operation. <p> {@link
     * ProfilePost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param firstName
     * @param lastName
     * @param password
     * @param email
     * @param city
     * @param lat
     * @param lng
     * @param description
     * @since 1.13
     */
    protected ProfilePost(java.lang.String firstName, java.lang.String lastName, java.lang.String password, java.lang.String email, java.lang.String city, java.lang.Double lat, java.lang.Double lng, java.lang.String description) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean.class);
      this.firstName = com.google.api.client.util.Preconditions.checkNotNull(firstName, "Required parameter firstName must be specified.");
      this.lastName = com.google.api.client.util.Preconditions.checkNotNull(lastName, "Required parameter lastName must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      this.city = com.google.api.client.util.Preconditions.checkNotNull(city, "Required parameter city must be specified.");
      this.lat = com.google.api.client.util.Preconditions.checkNotNull(lat, "Required parameter lat must be specified.");
      this.lng = com.google.api.client.util.Preconditions.checkNotNull(lng, "Required parameter lng must be specified.");
      this.description = com.google.api.client.util.Preconditions.checkNotNull(description, "Required parameter description must be specified.");
    }

    @Override
    public ProfilePost setAlt(java.lang.String alt) {
      return (ProfilePost) super.setAlt(alt);
    }

    @Override
    public ProfilePost setFields(java.lang.String fields) {
      return (ProfilePost) super.setFields(fields);
    }

    @Override
    public ProfilePost setKey(java.lang.String key) {
      return (ProfilePost) super.setKey(key);
    }

    @Override
    public ProfilePost setOauthToken(java.lang.String oauthToken) {
      return (ProfilePost) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfilePost setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfilePost) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfilePost setQuotaUser(java.lang.String quotaUser) {
      return (ProfilePost) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfilePost setUserIp(java.lang.String userIp) {
      return (ProfilePost) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String firstName;

    /**

     */
    public java.lang.String getFirstName() {
      return firstName;
    }

    public ProfilePost setFirstName(java.lang.String firstName) {
      this.firstName = firstName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String lastName;

    /**

     */
    public java.lang.String getLastName() {
      return lastName;
    }

    public ProfilePost setLastName(java.lang.String lastName) {
      this.lastName = lastName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public ProfilePost setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public ProfilePost setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String city;

    /**

     */
    public java.lang.String getCity() {
      return city;
    }

    public ProfilePost setCity(java.lang.String city) {
      this.city = city;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double lat;

    /**

     */
    public java.lang.Double getLat() {
      return lat;
    }

    public ProfilePost setLat(java.lang.Double lat) {
      this.lat = lat;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double lng;

    /**

     */
    public java.lang.Double getLng() {
      return lng;
    }

    public ProfilePost setLng(java.lang.Double lng) {
      this.lng = lng;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String description;

    /**

     */
    public java.lang.String getDescription() {
      return description;
    }

    public ProfilePost setDescription(java.lang.String description) {
      this.description = description;
      return this;
    }

    @Override
    public ProfilePost set(String parameterName, Object value) {
      return (ProfilePost) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_postReview".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfilePostReview#execute()} method to invoke the remote operation.
   *
   * @param reviewerPid
   * @param reviewerName
   * @param revieweePid
   * @param stars
   * @param description
   * @return the request
   */
  public ProfilePostReview profilePostReview(java.lang.Integer reviewerPid, java.lang.String reviewerName, java.lang.Integer revieweePid, java.lang.Integer stars, java.lang.String description) throws java.io.IOException {
    ProfilePostReview result = new ProfilePostReview(reviewerPid, reviewerName, revieweePid, stars, description);
    initialize(result);
    return result;
  }

  public class ProfilePostReview extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean> {

    private static final String REST_PATH = "postReview/{reviewerPid}/{reviewerName}/{revieweePid}/{stars}/{description}";

    /**
     * Create a request for the method "profile_postReview".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfilePostReview#execute()} method to invoke the remote
     * operation. <p> {@link ProfilePostReview#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param reviewerPid
     * @param reviewerName
     * @param revieweePid
     * @param stars
     * @param description
     * @since 1.13
     */
    protected ProfilePostReview(java.lang.Integer reviewerPid, java.lang.String reviewerName, java.lang.Integer revieweePid, java.lang.Integer stars, java.lang.String description) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean.class);
      this.reviewerPid = com.google.api.client.util.Preconditions.checkNotNull(reviewerPid, "Required parameter reviewerPid must be specified.");
      this.reviewerName = com.google.api.client.util.Preconditions.checkNotNull(reviewerName, "Required parameter reviewerName must be specified.");
      this.revieweePid = com.google.api.client.util.Preconditions.checkNotNull(revieweePid, "Required parameter revieweePid must be specified.");
      this.stars = com.google.api.client.util.Preconditions.checkNotNull(stars, "Required parameter stars must be specified.");
      this.description = com.google.api.client.util.Preconditions.checkNotNull(description, "Required parameter description must be specified.");
    }

    @Override
    public ProfilePostReview setAlt(java.lang.String alt) {
      return (ProfilePostReview) super.setAlt(alt);
    }

    @Override
    public ProfilePostReview setFields(java.lang.String fields) {
      return (ProfilePostReview) super.setFields(fields);
    }

    @Override
    public ProfilePostReview setKey(java.lang.String key) {
      return (ProfilePostReview) super.setKey(key);
    }

    @Override
    public ProfilePostReview setOauthToken(java.lang.String oauthToken) {
      return (ProfilePostReview) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfilePostReview setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfilePostReview) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfilePostReview setQuotaUser(java.lang.String quotaUser) {
      return (ProfilePostReview) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfilePostReview setUserIp(java.lang.String userIp) {
      return (ProfilePostReview) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer reviewerPid;

    /**

     */
    public java.lang.Integer getReviewerPid() {
      return reviewerPid;
    }

    public ProfilePostReview setReviewerPid(java.lang.Integer reviewerPid) {
      this.reviewerPid = reviewerPid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String reviewerName;

    /**

     */
    public java.lang.String getReviewerName() {
      return reviewerName;
    }

    public ProfilePostReview setReviewerName(java.lang.String reviewerName) {
      this.reviewerName = reviewerName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer revieweePid;

    /**

     */
    public java.lang.Integer getRevieweePid() {
      return revieweePid;
    }

    public ProfilePostReview setRevieweePid(java.lang.Integer revieweePid) {
      this.revieweePid = revieweePid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer stars;

    /**

     */
    public java.lang.Integer getStars() {
      return stars;
    }

    public ProfilePostReview setStars(java.lang.Integer stars) {
      this.stars = stars;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String description;

    /**

     */
    public java.lang.String getDescription() {
      return description;
    }

    public ProfilePostReview setDescription(java.lang.String description) {
      this.description = description;
      return this;
    }

    @Override
    public ProfilePostReview set(String parameterName, Object value) {
      return (ProfilePostReview) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_radius".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileRadius#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @param miles
   * @return the request
   */
  public ProfileRadius profileRadius(java.lang.Integer pid, java.lang.Double miles) throws java.io.IOException {
    ProfileRadius result = new ProfileRadius(pid, miles);
    initialize(result);
    return result;
  }

  public class ProfileRadius extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection> {

    private static final String REST_PATH = "profilesInRadius/{pid}/{miles}";

    /**
     * Create a request for the method "profile_radius".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileRadius#execute()} method to invoke the remote
     * operation. <p> {@link ProfileRadius#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param pid
     * @param miles
     * @since 1.13
     */
    protected ProfileRadius(java.lang.Integer pid, java.lang.Double miles) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
      this.miles = com.google.api.client.util.Preconditions.checkNotNull(miles, "Required parameter miles must be specified.");
    }

    @Override
    public ProfileRadius setAlt(java.lang.String alt) {
      return (ProfileRadius) super.setAlt(alt);
    }

    @Override
    public ProfileRadius setFields(java.lang.String fields) {
      return (ProfileRadius) super.setFields(fields);
    }

    @Override
    public ProfileRadius setKey(java.lang.String key) {
      return (ProfileRadius) super.setKey(key);
    }

    @Override
    public ProfileRadius setOauthToken(java.lang.String oauthToken) {
      return (ProfileRadius) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileRadius setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileRadius) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileRadius setQuotaUser(java.lang.String quotaUser) {
      return (ProfileRadius) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileRadius setUserIp(java.lang.String userIp) {
      return (ProfileRadius) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileRadius setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double miles;

    /**

     */
    public java.lang.Double getMiles() {
      return miles;
    }

    public ProfileRadius setMiles(java.lang.Double miles) {
      this.miles = miles;
      return this;
    }

    @Override
    public ProfileRadius set(String parameterName, Object value) {
      return (ProfileRadius) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_searchTag".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileSearchTag#execute()} method to invoke the remote operation.
   *
   * @param tag
   * @return the request
   */
  public ProfileSearchTag profileSearchTag(java.lang.String tag) throws java.io.IOException {
    ProfileSearchTag result = new ProfileSearchTag(tag);
    initialize(result);
    return result;
  }

  public class ProfileSearchTag extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection> {

    private static final String REST_PATH = "searchTags/{tag}";

    /**
     * Create a request for the method "profile_searchTag".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileSearchTag#execute()} method to invoke the remote
     * operation. <p> {@link ProfileSearchTag#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param tag
     * @since 1.13
     */
    protected ProfileSearchTag(java.lang.String tag) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.ProfileCollection.class);
      this.tag = com.google.api.client.util.Preconditions.checkNotNull(tag, "Required parameter tag must be specified.");
    }

    @Override
    public ProfileSearchTag setAlt(java.lang.String alt) {
      return (ProfileSearchTag) super.setAlt(alt);
    }

    @Override
    public ProfileSearchTag setFields(java.lang.String fields) {
      return (ProfileSearchTag) super.setFields(fields);
    }

    @Override
    public ProfileSearchTag setKey(java.lang.String key) {
      return (ProfileSearchTag) super.setKey(key);
    }

    @Override
    public ProfileSearchTag setOauthToken(java.lang.String oauthToken) {
      return (ProfileSearchTag) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileSearchTag setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileSearchTag) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileSearchTag setQuotaUser(java.lang.String quotaUser) {
      return (ProfileSearchTag) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileSearchTag setUserIp(java.lang.String userIp) {
      return (ProfileSearchTag) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String tag;

    /**

     */
    public java.lang.String getTag() {
      return tag;
    }

    public ProfileSearchTag setTag(java.lang.String tag) {
      this.tag = tag;
      return this;
    }

    @Override
    public ProfileSearchTag set(String parameterName, Object value) {
      return (ProfileSearchTag) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_setGroup".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileSetGroup#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @param gid
   * @return the request
   */
  public ProfileSetGroup profileSetGroup(java.lang.Integer pid, java.lang.Integer gid) throws java.io.IOException {
    ProfileSetGroup result = new ProfileSetGroup(pid, gid);
    initialize(result);
    return result;
  }

  public class ProfileSetGroup extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean> {

    private static final String REST_PATH = "setGroup/{pid}/{gid}";

    /**
     * Create a request for the method "profile_setGroup".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileSetGroup#execute()} method to invoke the remote
     * operation. <p> {@link ProfileSetGroup#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param pid
     * @param gid
     * @since 1.13
     */
    protected ProfileSetGroup(java.lang.Integer pid, java.lang.Integer gid) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
      this.gid = com.google.api.client.util.Preconditions.checkNotNull(gid, "Required parameter gid must be specified.");
    }

    @Override
    public ProfileSetGroup setAlt(java.lang.String alt) {
      return (ProfileSetGroup) super.setAlt(alt);
    }

    @Override
    public ProfileSetGroup setFields(java.lang.String fields) {
      return (ProfileSetGroup) super.setFields(fields);
    }

    @Override
    public ProfileSetGroup setKey(java.lang.String key) {
      return (ProfileSetGroup) super.setKey(key);
    }

    @Override
    public ProfileSetGroup setOauthToken(java.lang.String oauthToken) {
      return (ProfileSetGroup) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileSetGroup setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileSetGroup) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileSetGroup setQuotaUser(java.lang.String quotaUser) {
      return (ProfileSetGroup) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileSetGroup setUserIp(java.lang.String userIp) {
      return (ProfileSetGroup) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileSetGroup setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer gid;

    /**

     */
    public java.lang.Integer getGid() {
      return gid;
    }

    public ProfileSetGroup setGid(java.lang.Integer gid) {
      this.gid = gid;
      return this;
    }

    @Override
    public ProfileSetGroup set(String parameterName, Object value) {
      return (ProfileSetGroup) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "profile_setTag".
   *
   * This request holds the parameters needed by the xpertiseAPI server.  After setting any optional
   * parameters, call the {@link ProfileSetTag#execute()} method to invoke the remote operation.
   *
   * @param pid
   * @param tag
   * @return the request
   */
  public ProfileSetTag profileSetTag(java.lang.Integer pid, java.lang.String tag) throws java.io.IOException {
    ProfileSetTag result = new ProfileSetTag(pid, tag);
    initialize(result);
    return result;
  }

  public class ProfileSetTag extends XpertiseAPIRequest<com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean> {

    private static final String REST_PATH = "setTag/{pid}/{tag}";

    /**
     * Create a request for the method "profile_setTag".
     *
     * This request holds the parameters needed by the the xpertiseAPI server.  After setting any
     * optional parameters, call the {@link ProfileSetTag#execute()} method to invoke the remote
     * operation. <p> {@link ProfileSetTag#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param pid
     * @param tag
     * @since 1.13
     */
    protected ProfileSetTag(java.lang.Integer pid, java.lang.String tag) {
      super(XpertiseAPI.this, "POST", REST_PATH, null, com.example.scott.myapplication.backend.xpertiseAPI.model.MyBean.class);
      this.pid = com.google.api.client.util.Preconditions.checkNotNull(pid, "Required parameter pid must be specified.");
      this.tag = com.google.api.client.util.Preconditions.checkNotNull(tag, "Required parameter tag must be specified.");
    }

    @Override
    public ProfileSetTag setAlt(java.lang.String alt) {
      return (ProfileSetTag) super.setAlt(alt);
    }

    @Override
    public ProfileSetTag setFields(java.lang.String fields) {
      return (ProfileSetTag) super.setFields(fields);
    }

    @Override
    public ProfileSetTag setKey(java.lang.String key) {
      return (ProfileSetTag) super.setKey(key);
    }

    @Override
    public ProfileSetTag setOauthToken(java.lang.String oauthToken) {
      return (ProfileSetTag) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfileSetTag setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfileSetTag) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfileSetTag setQuotaUser(java.lang.String quotaUser) {
      return (ProfileSetTag) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfileSetTag setUserIp(java.lang.String userIp) {
      return (ProfileSetTag) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer pid;

    /**

     */
    public java.lang.Integer getPid() {
      return pid;
    }

    public ProfileSetTag setPid(java.lang.Integer pid) {
      this.pid = pid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String tag;

    /**

     */
    public java.lang.String getTag() {
      return tag;
    }

    public ProfileSetTag setTag(java.lang.String tag) {
      this.tag = tag;
      return this;
    }

    @Override
    public ProfileSetTag set(String parameterName, Object value) {
      return (ProfileSetTag) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link XpertiseAPI}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link XpertiseAPI}. */
    @Override
    public XpertiseAPI build() {
      return new XpertiseAPI(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link XpertiseAPIRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setXpertiseAPIRequestInitializer(
        XpertiseAPIRequestInitializer xpertiseapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(xpertiseapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
